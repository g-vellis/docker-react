# https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11437124#questions

language: generic

# The first thing we are going to do is: "sudo: required";
# anytime that we want to make use of Docker, we need
# to have super user permissions.
# And "sudo: required" says:
# "Hey Travis, we need super user level permissions"
# to execute this build.
sudo: required
services:
   # 1. Tell Travis: we need a copy of Docker running.
   #
   # Specifies that we need Docker CLI pre-installed.
   # By adding this in, Travis CLI is going to automatically
   # install a copy of Docker into our little running container.
   - docker

# before_install section is going to have a series of different commands
# that get executed before our tests are run.
#
# So, you can imagine anything we list right here,
# as being some series of steps or some series of setup
# that needs to occur:
#   -  before we start to either DEPLOY our PROJECT, or
#   -  before we start to RUN our TESTS.
before_install:
   # 2. Build our Image using Dockerfile.dev
   #
   # We want to attempt to build our Docker Image before the tests run.
   # Below is the command that should be executed to build our Docker Image.
   #
   # docker build . -> returns the id of the Image that was generated.
   # So, now in the steps below, we could refer to the Image that is created
   # by saying gvellis/docker-react (we  will not have to copy/paste the generated  <image id> arround - this is an automated process).
   #
   #                                      Our non-default Dockerfile we want to be used
   #                                      in order for the Image to be generated.
   #              we define               |
   #              a tag in order to be    |                 We set the build context.
   #              able to reference the   |                 which essentially means,
   #              generated Image in      |                 use the current directory
   #              subsequent steps        |                 when figuring out what to do.
   #              |                       |                 |
   #              |  e.g. my Docker       |                 |
   #              |  username             |                 |
   #              |  |       e.g.the      |                 |
   #              |  |       GitHub repo  |                 |
   #              |  |       name         |                 |
   #              |  |       |            |                 |
   - docker build -t gvellis/docker-react -f Dockerfile.dev .
#  - docker build -t TESTME -f Dockerfile.dev .  would also do the job.

# 3. Tell Travis how to run our test suite.
#    For this purpose we need to add a new section, called "script".
#    This section is supposed to contain all the different commands
#    that need to be executed to actually run our test suite.
script:
   # Travis CI is going to be watching the output of each of these commands,
   # and from each command, if it ever gets a return status code other than 0,
   # Travis is going to assume that our build failed (i.e. )that our tests failed to run properly),
   # and it's going to assume that our code is essentially broken.
   #
   # So, in order to actually run our tests, we are going to use the same Docker command
   # that we use to start up our Container out of that Image and run the tests inside of it.
   #
   #
   # Any time we run our test suite on Travis CI, Travis is going to assume that our test suite runs
   # and then exits automatically, and he essentially says: "OK either successfully ran all tests",
   # or something wrong just occurred.
   # However, the default behavior of npm run test is to run our test suite one time,
   # and then present us with a menu that says: "OK well you know I'm not going to sit here
   # and wait for you to tell me whether you want to do some more tests, or filter, or do
   # whatever else. That is, it  does not finish as soon as it runs the tests.
   # So, the default "npm run test" command, just kind of hangs there and never exits, ever.
   # And so, if we ran this on Travis CI, Travis would say: "well you know it's been like
   # 30 days and I'm still waiting here for the results of "npm run test"!":P
   # To work around this and make sure that the test suite automatically exits (the instant
   # that the first run is completed), we are going to add on a little additional command up here:
   #  -- --coverage
   #
   #                                            We override the default command,
   #                                            by saying: "npm run test".
   #                                            |
   #                       the Image id which   |
   #                       we do not have to    |
   #                       find as we used a    |
   #                       tag in the prev.     |
   #                       step                 |             Flag to npm run tests so as to exit
   #                       |                    |             as soon as the the first tests run
   #                       |                    |             is completed.
   #                       |                    |             | REPLACED BY: -e CI=true
   - docker run -e CI=true gvellis/docker-react npm run test -- --coverage

# 4. Tell Travis how to deploy our code to AWS.
# we add another secton, namely "deploy".
# Inside the section, we are going to add in a bunch of configuration
# to tell Travis CI exactly how to take our application
# and deploy it off to AWS.
deploy:
   # Travis CI comes preconfigured to deployer application
   # to a handful of different providers or hosting providers,
   # such as: AWS or Digital Ocean, or whichever other you can
   # possibly imagine.
   # So, by just saying provider: "elasticbeanstalk", we are essentially
   # telling Travis CI that: "hey, we want you to use this set
   # of instructions to attempt to automatically deploy our application".
   # So, just by specifying this, Travis CI is going to really
   # do a lot of stuff for us, automatically.
   #
   # Now, we are going to still provide a lot of other options
   # in here, as well, to just provide some further customization.
   provider: "elasticbeanstalk"

   # The next one we are going to provide is: "region".
   # Now, "region" is going to be a little bit of a tough one,
   # because the region that you are going to specify,
   # depends upon exactly where you originally created your elastic
   # beanstalk instance.
   # Here, you need to specify whatever region your elasticbeanstalk
   # instance was just created in.
   # See: The autogenerated by AWS Elasticbeanstalk instance URL
   # in the elasticbeanstalk dashboard,
   #  e.g. DockerReact-env.eba-pzwwzmds.us-east-2.elasticbeanstalk.com
   # to find out what that region is.
   region: "us-east-2"

   # Then, we are going to add in a couple other options.
   # Now, we are going to specify the name of our app.
   # Now, the name of the app is the same name that you
   # had created back over on the elasticbeanstalk dashboard.
   app: "docker-react"

   # The next configuration piece we are going to add in,
   # is the "environment" name,
   # e.g. DockerReact-env
   # which can be found in the elasticbeanstalk dashboard.
   #
   # In AWS terms, the actual app that is running inside of AWS,
   # is not really referred to as an app but instead it is referred
   # to as an Environment.
   env: "DockerReact-env"

   # Now, the next piece of configuration here is going to be
   # just a little bit nastier than the two we have just
   # went through.
   # We are going to put in a "bucket_name".
   # So, when Travis decides to deploy your codebase, it is
   # going to take all the files inside of your GitHub repository,
   # it is going to zip them all up into one single file,
   # and then it is going to copy all them over to an S3 bucket,
   # which is essentially a hard drive running on AWS.
   #
   # Once Travis CI copies all those files over to S3 bucket,
   # Travis CI  is then going to essentially poke at a
   # "elasticbeanstalk" and say: "Hey I just uploaded this
   # new zip file"; use that to re-deploy your application.
   #
   # So, we need to provide the name of the bucket that
   # Travis CI is going to put our zip file into.
   #
   # The good news here is that an a S3 bucket has been
   # automatically generated for you already, when you initially
   # created the elasticbeanstalk instance.
   #
   # In AWS we search for: "S3 scalable storage in the cloud".
   # In the displayed S3 list, you should see one called:
   # elasticbeanstalk- and then the name of the region that
   # your elasticbeanstalk was placed in.
   bucket_name: "elasticbeanstalk-us-east-2-736749029387"

   # And then, we are going to also do the "bucket_path".
   #
   # So, the S3 bucket right above, is holding all these different files.
   # It gets reused for all of the different elasticbeanstalk environments
   # that you create.
   # So, inside this S3 bucket, that is holding all these different files,
   # I am going to be looking for the folder that is essentially
   # the name of my project.
   #
   # Now, when you first create your elasticbeanstalk instance,
   # chances are it is not going to create a folder by default automatically.
   # That folder is only going to be created the first time
   # that you do a deploy.
   # So, by default the bucket path that you are supposed to use
   # is going to be exactly equal to the app name.
   # So, we use the same value we used for the "app"  property.
   bucket_path: "docker-react"

   # The very last thing that I will do right now is,
   # to deploy the application when the master branch, and only that,
   # gets some new code.
   # So, this essentially means: anytime we push code to branch "master",
   # that is the time to deploy.
   on:
      branch: "master"

   # Now, the last thing we have to add in here is, a set of API keys
   # that are going to give access to our AWS account over to Travis CI.
   # We need to add our AWS variables to the deploy script of the .travis.yml file.
   # Otherwise, we will get an error when Travis attempts to run our code.
   #
   # So, the last thing we do is generate that set of API keys, and then
   # enter them into this travis.yml script.
   #
   # So, I will get started by opening up my AWS console and then find
   # the "services" tab at the top, and I am going to search for "IAM".
   # "AIM" is a service that is used to manage API keys that can be used
   # by outside services.
   # On the left hand side, we are going to find the section of "users",
   # because we are essentially going to get generate a new user
   # that is going to be used by Travis CI.
   # then at the top of fine add user and then I'll provide a user.
   # I am going to give a descriptive name,
   #               e.g.: "docker-react-travis-ci"
   # and then underneath it, I am going to give programmatic access only.
   #
   # The set of API keys that we are going to generate here are only going
   # to be used by Travis CI through network requests. Travis CI is never
   # going to be making direct use of the AWS management console.
   # Then, in the permissions tab, we are going to select "Atach existing policies".
   #
   # These "policies" are essentially permissions. We are granting permissions
   # to this new user that we are creating.
   # So, right now we are essentially listing out all the different things
   # that this new user is going to have the ability to do.
   #
   #
   # In particular, we want to make sure that this new user has the ability
   # to deploy your application to elasticbeanstalk; So, I'm going to search for:
   # "beanstalk".
   # We  select: "AWSElasticBeanstalkFullAccess".
   #
   # And then, create user.
   #
   # That will create a user and generate a set of API keys that can be used by
   # Travis CI to deploy our application.
   #
   # !!!!!!!!!!
   # The "secret access key" that has been generated is only going to be shown
   # to you exactly one time.
   #
   # So, we are going to now use the Access Key ID and the secret access key.
   # Now, one quick thing, we do not want to take those keys and put them directly
   # into our travis.yml file !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   #
   # Remember!!! Right now, our GitHub repository is entirely public. So,
   # if we put those AWS keys into our repo and then push that up to Github,
   # everyone in the world is going to have access to our AWS account.
   # Instead, we are going to make use of a feature of environment secrets
   # provided by Travis CI (we  set the  Environemnt Variables  below and set
   # the corresponding values generated by AWS).
   #
   #              get it from the Travis local environment configuration
   #              |
   access_key_id: $AWS_ACCESS_KEY
   secret_access_key: $AWS_SECRET_KEY
